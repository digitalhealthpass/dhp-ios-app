//
//  Proof.swift
//  Holder
//
//  (c) Copyright Merative US L.P. and others 2020-2022 
//
//  SPDX-Licence-Identifier: Apache 2.0
//

import Foundation

public struct Proof: Codable {
    enum CodingKeys: String, CodingKey {
        case type, created, creator
        case proofPurpose, verificationMethod, domain, challenge
        case issuerData, attributes, nonce
        case signatureValue, jws, proofValue, signature, signatureCorrectnessProof
    }
    
    // ======================================================================
    // MARK: - Public
    // ======================================================================
    
    // MARK: - Public Properties
    
    /**
     A URI that identifies the digital cryptographic suite that was used to create the signature. For example: Ed25519Signature2018.
     */
    public var type: String?
    
    /**
     The string value of an [ISO8601] combined date and time string generated by the Proof Algorithm.
     */
    public var created: String?
    
    public var creator: String?
    
    
    
    /**
     The specific intent for the proof, the reason why an entity created it. Acts as a safeguard to prevent the proof from being misused for a purpose other than the one it was intended for.
     */
    public var proofPurpose: String?

    /**
     A set of parameters required to independently verify the proof, such as an identifier for a public/private key pair that would be used in the proof.
     */
    public var verificationMethod: String?

    /**
     A string value that specifies the operational domain of a digital proof. This could be an Internet domain name like example.com, an ad-hoc value such as mycorp-level3-access, or a very specific transaction value like 8zF6T$mqP. A signer could include a domain in its digital proof to restrict its use to particular target, identified by the specified domain.
     */
    public var domain: String?
    
    /**
     A random or pseudo-random value used by some authentication protocols to mitigate replay attacks.
     */
    public var challenge: String?

    
    
    public var issuerData: String?
    
    public var attributes: String?

    /**
     A string value that is included in the digital signature and MUST only be used once for a particular domain and window of time. This value is used to mitigate replay attacks.
     */
    public var nonce: String?
    
    
    
    /**
     One of any number of valid representations of signature value generated by the Proof Algorithm.
     */
    public var signatureValue: String?
   
    /**
     One of any number of valid representations of signature value generated by the Proof Algorithm.
     */
    public var jws: String?

    /**
     One of any number of valid representations of signature value generated by the Proof Algorithm.
     */
    public var proofValue: String?

    /**
     One of any number of valid representations of signature value generated by the Proof Algorithm.
     */
    public var signature: String?
    
    public var signatureCorrectnessProof: String?

}

extension Proof {
    
    public init(value: [String: Any]) {
        created = value["created"] as? String
        creator = value["creator"] as? String
        nonce = value["nonce"] as? String
        signatureValue = value["signatureValue"] as? String
        type = value["type"] as? String
    }

}
